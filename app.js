// Generated by CoffeeScript 1.8.0
(function() {
  var addRow, attachRow, clickBit, cloneRow, currentTool, editedText, emptyRow, getBit, load, removeRow, rows, save, setTool, toDecimal, updateBit;

  rows = [];

  emptyRow = function() {
    var i;
    return {
      bits: (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 31; i = ++_i) {
          _results.push({
            color: 'black',
            value: 0
          });
        }
        return _results;
      })(),
      label: ''
    };
  };

  cloneRow = function(row) {
    var bit;
    return {
      bits: (function() {
        var _i, _len, _ref, _results;
        _ref = row.bits;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          bit = _ref[_i];
          _results.push($.extend({}, bit));
        }
        return _results;
      })(),
      label: ''
    };
  };

  getBit = function(n, i) {
    return rows[n].bits[i];
  };

  toDecimal = function(n) {
    var i, j, octets, sum, value;
    octets = (function() {
      var _i, _j, _len, _ref, _ref1, _results;
      _ref = [0, 8, 16, 24];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        sum = 0;
        value = 1;
        for (j = _j = _ref1 = i + 7; _ref1 <= i ? _j <= i : _j >= i; j = _ref1 <= i ? ++_j : --_j) {
          sum += getBit(n, j).value * value;
          value *= 2;
        }
        _results.push(sum);
      }
      return _results;
    })();
    return octets.join('.');
  };

  attachRow = function(row) {
    var bit, i, n, tds, tr, _i, _len, _ref;
    n = rows.length;
    rows.push(row);
    tds = [];
    tds.push("<td><input id=\"r" + n + "label\" type=\"text\" value=\"" + row.label + "\" size=\"5\" /></td>");
    tds.push("<td>&nbsp;</td>");
    _ref = row.bits;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      bit = _ref[i];
      if (i === 8 || i === 16 || i === 24) {
        tds.push('<td>&ndash;</td>');
      }
      tds.push("<td><button id=\"r" + n + "b" + i + "\" onclick=\"clickBit(" + n + ", " + i + ");\" class=\"" + bit.color + "\">" + bit.value + "</button></td>");
    }
    tds.push("<td>&nbsp;</td>");
    tds.push("<td id=\"r" + n + "dec\">" + (toDecimal(n)) + "</td>");
    tr = '<tr>' + tds.join('') + '</tr>';
    $('#bit-table').append(tr);
    return $("\#r" + n + "label").change(function() {
      return editedText(n);
    });
  };

  addRow = function() {
    var lastRow, _ref;
    lastRow = (_ref = rows[rows.length - 1]) != null ? _ref : emptyRow();
    attachRow(cloneRow(lastRow));
    return save();
  };

  removeRow = function() {
    if (rows.length <= 0) {
      return;
    }
    rows.pop();
    $('#bit-table tr').last().remove();
    return save();
  };

  editedText = function(n) {
    rows[n].label = $("\#r" + n + "label").val();
    return save();
  };

  updateBit = function(n, i) {
    var button;
    button = $("\#r" + n + "b" + i);
    button.html(getBit(n, i).value);
    $("\#r" + n + "dec").html(toDecimal(n));
    button.removeClass();
    return button.addClass(getBit(n, i).color);
  };

  currentTool = 'flip';

  setTool = function(tool) {
    return currentTool = tool;
  };

  clickBit = function(n, i) {
    switch (currentTool) {
      case 'flip':
        getBit(n, i).value ^= 1;
        break;
      default:
        getBit(n, i).color = currentTool;
    }
    updateBit(n, i);
    return save();
  };

  save = function() {
    return localStorage.setItem('networker', JSON.stringify(rows));
  };

  load = function() {
    var res, row, _i, _len, _ref;
    res = localStorage.getItem('networker');
    if (res != null) {
      _ref = JSON.parse(res);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        attachRow(row);
      }
      return true;
    } else {
      return false;
    }
  };

  $(document).ready(function() {
    return load() || addRow();
  });

  window.addRow = addRow;

  window.removeRow = removeRow;

  window.clickBit = clickBit;

  window.setTool = setTool;

}).call(this);
